name: Unedited Text Updater

on:
  workflow_dispatch:
    inputs:
      force_update:
        type: boolean
        required: true
  schedule:
    - cron: "0 5 * * *"

defaults:
  run:
    shell: pwsh

jobs:
  update:
    name: Updating base
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Check version
        id: check_update
        run: |
          $remote = Invoke-RestMethod https://raw.githubusercontent.com/Expugn/priconne-database/master/version.json | Select -Expand JP | Select -Expand version
          $local = Get-Content "version" -Raw
          if ($remote -ne $local -or ${{ inputs.force_update }} -eq 'true') {
              Write-Host "New version ($remote) is found!"
              "version=$remote" >> $env:GITHUB_OUTPUT
              Invoke-WebRequest https://raw.githubusercontent.com/Expugn/priconne-database/master/master_jp.db -OutFile master.db
              Set-Content -Path "./version" -Value $remote -NoNewline
          }
          else {
              Write-Host "The current version is latest!"
              "version=latest" >> $env:GITHUB_OUTPUT
          }

      - name: Clone EN resources
        if: steps.check_update.outputs.version != 'latest'
        uses: actions/checkout@v3
        with:
          repository: 'FabulousCupcake/en_redive_master_db_diff'
          path: 'en_csv'

      - name: Generate .csv dump
        if: steps.check_update.outputs.version != 'latest'
        shell: bash
        run: |
          mkdir csv
          echo "::group::Dump Logs"
          . .github/scripts/dump.sh master.db
          echo "::endgroup::"

      - name: Generate raw text files
        if: steps.check_update.outputs.version != 'latest'
        run: |
          Write-Output "::group::Extract Logs"
          & .github/scripts/extract_text.ps1
          Write-Output "::endgroup::"

      - name: Cleanup
        if: steps.check_update.outputs.version != 'latest'
        run: |
          Remove-Item -Force -Recurse -Path "csv", "en_csv", "master.db"

      - name: Create PR and merge
        if: steps.check_update.outputs.version != 'latest'
        run: |
          $VERSION="${{ steps.check_update.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add jp/* jp_en/* version
          git checkout -b "patch/$VERSION"
          git commit -m "$VERSION"
          git push -u origin "patch/$VERSION"
          gh pr create --title "Update $VERSION" --body "Created automatically w/ github actions"
          gh pr merge --merge -d
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          
